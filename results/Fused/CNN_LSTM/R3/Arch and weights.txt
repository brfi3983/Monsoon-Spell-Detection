w_array[0, 1] = 1.2   #penalty for classifying a dry day as normal
w_array[0, 2] = 1.3   #penalty for classifying a dry day as wet
w_array[2, 1] = 1.2   #penalty for classifying a wet day as normal
w_array[2, 0] = 1.3   #penalty for classifying a wet day as dry

========================================================================================

def CombinedModel(Cnn_model, lstm_model, x_train_2d, y_train_2d, x_train_1d, x_valid_2d, x_valid_1d, y_valid_2d, lr, bs, epochs):
    # Concatinating the layer from the lstm
    CombinedInput = concatenate([Cnn_model.output, lstm_model.output])

    dense1 = Dense(64, activation='relu')(CombinedInput)
    drop1 = Dropout(0.4)(dense1)
    dense2 = Dense(32, activation='relu')(drop1)
    output = Dense(3, activation='softmax')(dense2)

    model = Model(inputs=[Cnn_model.input, lstm_model.input], outputs=output)

    opt = Adam(lr=lr, decay=1e-5)
    # model.compile(optimizer=opt, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

    rms = RMSprop(lr = lr)
    model.compile(loss=defined_loss_func, optimizer=opt, metrics=['accuracy'])

    model.summary()
    # print(x_train.shape, x_train_rain.shape)
    history = model.fit([x_train_2d, x_train_1d], y_train_2d, batch_size=bs, epochs=epochs, validation_data=([x_valid_2d, x_valid_1d], y_valid_2d), verbose=2)  # ,class_weight='auto')

    return [model, history]

# ======================================================================================================================
# function: the main function ....
def LSTM_model(X):

	#=====================================
	# Model Structure
	inputs = Input(shape=(X.shape[1:]))

	lay_1 = CuDNNLSTM(128, return_sequences = True)(inputs) # kernel_regularizer = l2(0.01)
	drop_1 = Dropout(0.2)(lay_1)
	lay_2 = CuDNNLSTM(64)(drop_1)
	dense1 = Dense(32, activation = 'relu')(lay_2)
	output = Dropout(0.2)(lay_2)

	model = Model(inputs=inputs, outputs=output)

	return model

# ===================================================================================================================
# function: train the CNN model for the classification task
def CNN_model(x_train):

	# Model
	inputs = Input(shape=x_train.shape[1:])
	conv1 = Conv2D(filters=64, kernel_size=(3, 3),
				   data_format='channels_first')(inputs)
	pool1 = MaxPooling2D(pool_size=(2, 2), data_format='channels_first')(conv1)
	drop1 = Dropout(0.6)(pool1)

	conv2 = Conv2D(filters=32, kernel_size=(3, 3),
				   data_format='channels_first')(drop1)
	pool2 = MaxPooling2D(pool_size=(2, 2), data_format='channels_first')(conv2)
	drop1 = Dropout(0.6)(pool2)

	flat = Flatten()(drop1)
	dense1 = Dense(64, activation='relu')(flat)
	output = BatchNormalization(axis = 1)(dense1)
	model = Model(inputs=inputs, outputs=output)
	
	return model